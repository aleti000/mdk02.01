# Лекция 14: Сетевая связность контейнеров

## Цели и задачи
- Изучить основные принципы сетевого взаимодействия между контейнерами.
- Разобраться с ролью сетей Docker в организации связи между контейнерами.
- Научиться создавать и управлять сетями Docker.
- Понять процесс отладки и диагностики сетевых проблем в контейнерах.
- Изучить использование DNS для взаимодействия между контейнерами.

---

## Основной материал

### 1. Введение в сетевую связность контейнеров

#### Что такое сетевая связность?
Сетевая связность — это способность контейнеров взаимодействовать друг с другом через сети. Docker предоставляет встроенные инструменты для создания и управления сетями, что упрощает взаимодействие между контейнерами.

#### Зачем нужна сетевая связность?
- Обеспечение взаимодействия между микросервисами.
- Разделение контейнеров на изолированные сети.
- Упрощение отладки и мониторинга сетевого трафика.

#### Типы сетей Docker:
1. **Bridge**: Стандартная сеть для контейнеров на одном хосте.
2. **Host**: Контейнер использует сеть хоста напрямую.
3. **Overlay**: Сеть для взаимодействия контейнеров на разных хостах.
4. **Macvlan**: Сеть для назначения контейнерам MAC-адресов.
5. **None**: Отключение сети для контейнера.

---

### 2. Создание и управление сетями Docker

#### Создание сети
Создайте новую сеть типа `bridge`:
docker network create my_bridge_network

#### Просмотр сетей
Просмотрите список доступных сетей:
docker network ls

#### Инспектирование сети
Получите подробную информацию о сети:
docker network inspect my_bridge_network

#### Подключение контейнера к сети
Запустите контейнер и подключите его к сети:
docker run -d --name web --network my_bridge_network nginx

Подключите существующий контейнер к сети:
docker network connect my_bridge_network db

#### Отключение контейнера от сети
Отключите контейнер от сети:
docker network disconnect my_bridge_network db

#### Удаление сети
Удалите сеть:
docker network rm my_bridge_network

---

### 3. Взаимодействие между контейнерами через DNS

#### Как работает DNS в Docker?
Docker автоматически настраивает DNS для контейнеров в пользовательских сетях (например, `bridge` или `overlay`). Контейнеры могут обращаться друг к другу по имени.

#### Пример взаимодействия
1. Создайте сеть:
   docker network create app_network
2. Запустите два контейнера:
   docker run -d --name web --network app_network nginx
   docker run -d --name db --network app_network mysql
3. Проверьте взаимодействие:
   docker exec -it web ping db

---

### 4. Проброс портов

#### Зачем нужен проброс портов?
Проброс портов позволяет сделать сервисы контейнера доступными на хосте.

#### Пример проброса портов
Запустите контейнер с пробросом порта:
docker run -d -p 8080:80 --name web nginx

Теперь веб-сервер доступен по адресу:
http://localhost:8080

---

### 5. Диагностика и устранение неисправностей

#### Проверка сетевых настроек контейнера
Просмотрите сетевые настройки контейнера:
docker inspect web

#### Проверка соединения
Проверьте соединение между контейнерами:
docker exec -it web curl http://db:3306

#### Распространенные проблемы:
- Конфликты IP-адресов.
- Неправильная настройка сетей.
- Блокировка файрволом.

---

### 6. Безопасность сетей Docker

#### Защита сетей
1. Используйте пользовательские сети вместо стандартной `bridge`.
2. Ограничьте доступ к сети только для доверенных контейнеров.
3. Используйте файрвол для защиты портов.

#### Мониторинг сетей
Используйте инструменты мониторинга для отслеживания сетевого трафика:
docker network inspect

---

## Домашнее задание
1. Создайте пользовательскую сеть Docker.
2. Запустите два контейнера (например, Nginx и MySQL) и подключите их к сети.
3. Проверьте взаимодействие между контейнерами через DNS.
4. Настройте проброс портов для одного из контейнеров.
5. Изучите логи и найдите записи о сетевых запросах.

---

## Вопросы для самопроверки
1. Что такое сетевая связность контейнеров и для чего она используется?
2. Как создать и управлять сетями Docker?
3. Как организовать взаимодействие между контейнерами через DNS?
4. Как настроить проброс портов для контейнера?
5. Какие меры безопасности можно применить для защиты сетей Docker?
