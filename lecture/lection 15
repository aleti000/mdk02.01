# Лекция 15: Безопасность контейнеров

## Цели и задачи
- Изучить основные принципы обеспечения безопасности контейнеров.
- Разобраться с рисками, связанными с использованием Docker.
- Научиться защищать контейнеры через управление правами, образами и сетями.
- Понять процесс мониторинга и аудита контейнеров.
- Изучить инструменты для повышения безопасности контейнеров.

---

## Основной материал

### 1. Введение в безопасность контейнеров

#### Почему важна безопасность контейнеров?
Контейнеры предоставляют изолированную среду для приложений, но они не являются полностью защищенными по умолчанию. Уязвимости могут возникать из-за:
- Небезопасных образов.
- Неправильной настройки прав доступа.
- Открытых портов и сетей.
- Устаревших версий программного обеспечения.

#### Основные принципы безопасности:
1. Минимизация привилегий.
2. Использование проверенных образов.
3. Регулярное обновление образов и контейнеров.
4. Мониторинг и аудит.

---

### 2. Управление образами

#### Зачем важно проверять образы?
Образы могут содержать уязвимости или вредоносный код. Поэтому важно использовать только проверенные и надежные образы.

#### Поиск уязвимостей в образах
Используйте инструменты для анализа образов, например:
docker scan image_name

#### Пример использования официальных образов
Всегда используйте официальные образы из Docker Hub:
docker pull nginx:latest

#### Создание минимальных образов
Создавайте образы с минимальным набором зависимостей. Например, используйте Alpine Linux:
FROM alpine:latest
RUN apk add --no-cache nginx
CMD ["nginx", "-g", "daemon off;"]

---

### 3. Ограничение прав контейнеров

#### Запуск контейнера с ограниченными правами
По умолчанию контейнеры запускаются с полными правами root. Это может быть опасно. Чтобы ограничить права:
docker run --cap-drop ALL --cap-add NET_BIND_SERVICE ...

#### Запуск контейнера с пользователем
Запустите контейнер под непривилегированным пользователем:
docker run -u 1000:1000 ...

#### Использование read-only файловой системы
Ограничьте возможность записи в файловую систему:
docker run --read-only ...

---

### 4. Безопасность сетей

#### Использование пользовательских сетей
Не используйте стандартную сеть bridge. Создайте пользовательскую сеть:
docker network create secure_network

#### Ограничение доступа к портам
Открывайте только необходимые порты:
docker run -p 8080:80 ...

#### Блокировка ненужных сетевых интерфейсов
Используйте параметр --network none для контейнеров, которым не нужен сетевой доступ:
docker run --network none ...

---

### 5. Мониторинг и аудит

#### Мониторинг контейнеров
Используйте инструменты для мониторинга работы контейнеров:
docker events

#### Аудит логов
Просматривайте логи контейнеров для выявления подозрительной активности:
docker logs container_id

#### Инструменты для мониторинга
Используйте сторонние инструменты, такие как:
- Falco: Для обнаружения аномалий.
- Sysdig: Для анализа контейнеров.

---

### 6. Защита хоста

#### Обновление Docker
Регулярно обновляйте Docker до последней версии:
apt update && apt install docker-ce

#### Использование AppArmor и SELinux
Настройте профили безопасности для контейнеров:
docker run --security-opt apparmor=profile_name ...

#### Ограничение ресурсов
Ограничьте использование CPU и памяти:
docker run --memory="512m" --cpus="1" ...

---

### 7. Пример безопасного развертывания контейнера

#### Шаги:
1. Создайте минимальный образ:
FROM alpine:latest
RUN apk add --no-cache nginx
CMD ["nginx", "-g", "daemon off;"]
2. Соберите образ:
   docker build -t secure-nginx .
3. Запустите контейнер с ограниченными правами:
   docker run -d --name web --read-only --cap-drop ALL --cap-add NET_BIND_SERVICE -p 8080:80 secure-nginx
4. Подключите контейнер к безопасной сети:
   docker network connect secure_network web

---

## Домашнее задание
1. Проанализируйте образ на наличие уязвимостей с помощью docker scan.
2. Запустите контейнер с ограниченными правами (например, с --cap-drop).
3. Создайте пользовательскую сеть и подключите к ней контейнер.
4. Настройте мониторинг контейнеров с помощью docker events.
5. Изучите логи контейнера и найдите записи о подозрительной активности.

---

## Вопросы для самопроверки
1. Почему важна безопасность контейнеров?
2. Как проверить образ на наличие уязвимостей?
3. Как ограничить права контейнера?
4. Как защитить сеть контейнеров?
5. Какие инструменты можно использовать для мониторинга контейнеров?
