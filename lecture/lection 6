# Лекция 6: Управление пакетами в Linux

## Цели и задачи
- Изучить основные системы управления пакетами в Linux.
- Научиться устанавливать, обновлять и удалять пакеты.
- Разобраться с репозиториями и их настройкой.
- Понять принципы работы с зависимостями пакетов.

## Основной материал

---

### 1. Введение в управление пакетами

#### Что такое пакет?
Пакет — это архив, содержащий программное обеспечение и метаданные (например, описание, зависимости, версию). Пакеты позволяют легко устанавливать, обновлять и удалять программы в Linux.

#### Зачем нужны системы управления пакетами?
Системы управления пакетами решают следующие задачи:
- Автоматическая установка программ.
- Решение зависимостей между пакетами.
- Обновление программ до последних версий.
- Удаление программ с очисткой всех файлов.

#### Типы систем управления пакетами:
1. DEB-based системы:
   - Используются в дистрибутивах на базе Debian (Ubuntu, Linux Mint).
   - Инструменты: dpkg, apt, apt-get.
2. RPM-based системы:
   - Используются в дистрибутивах на базе Red Hat (Fedora, CentOS, ALT Linux).
   - Инструменты: rpm, yum, dnf.
3. Прочие системы:
   - Например, pacman для Arch Linux или zypper для openSUSE.

---

### 2. Работа с DEB-based системами

#### Основные инструменты:
1. dpkg:
   - Низкоуровневый инструмент для работы с .deb пакетами.
   - Примеры команд:
     dpkg -i package.deb # Установка пакета
     dpkg -r package # Удаление пакета
     dpkg -l # Список установленных пакетов

2. apt:
   - Высокоуровневый инструмент для работы с репозиториями.
   - Примеры команд:
     apt update # Обновление списка пакетов
     apt install package # Установка пакета
     apt remove package # Удаление пакета
     apt upgrade # Обновление всех пакетов

#### Настройка репозиториев:
Репозитории хранятся в файле /etc/apt/sources.list. Пример содержимого:
deb http://archive.ubuntu.com/ubuntu focal main restricted
deb http://archive.ubuntu.com/ubuntu focal-updates main restricted

Для добавления нового репозитория используйте команду:
add-apt-repository ppa:user/ppa-name

---

### 3. Работа с RPM-based системами

#### Основные инструменты:
1. rpm:
   - Низкоуровневый инструмент для работы с .rpm пакетами.
   - Примеры команд:
     rpm -i package.rpm # Установка пакета
     rpm -e package # Удаление пакета
     rpm -qa # Список установленных пакетов

2. yum/dnf:
   - Высокоуровневые инструменты для работы с репозиториями.
   - Примеры команд:
     yum install package # Установка пакета
     yum remove package # Удаление пакета
     yum update # Обновление всех пакетов

#### Настройка репозиториев:
Репозитории хранятся в файлах /etc/yum.repos.d/*.repo. Пример содержимого:
[base]
name=Base Repository
baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/
enabled=1
gpgcheck=1

---

### 4. Работа с зависимостями

#### Что такое зависимости?
Зависимости — это другие пакеты, необходимые для работы программы. Например:
- Программа может требовать определенные библиотеки (например, `libssl`).
- Иногда зависимости включают утилиты или языки программирования (например, Python).

#### Типы зависимостей:
1. Прямые зависимости:
   - Пакеты, которые программа использует напрямую.
   - Например, веб-сервер Nginx зависит от библиотеки OpenSSL.
2. Косвенные зависимости:
   - Пакеты, которые используются зависимыми пакетами.
   - Например, если Nginx зависит от OpenSSL, то OpenSSL может зависеть от других библиотек.

#### Решение зависимостей:
- Системы управления пакетами автоматически разрешают зависимости при установке.
- Если зависимость отсутствует в репозиториях, её можно установить вручную:
  wget http://example.com/library.rpm
  rpm -i library.rpm

#### Пример:
Установите программу с зависимостями:
apt install nginx

Если зависимость не найдена, добавьте репозиторий или скачайте пакет вручную:
add-apt-repository ppa:user/ppa-name
apt update
apt install nginx

#### Особенности:
- В DEB-based системах зависимости разрешаются через `apt`.
- В RPM-based системах зависимости разрешаются через `yum` или `dnf`.

---

### 5. Управление версиями пакетов

#### Обновление пакетов:
- Для обновления всех пакетов используйте:
  apt upgrade
  yum update
- Для обновления конкретного пакета:
  apt install package
  yum reinstall package

#### Откат версии:
- Если новая версия вызывает проблемы, можно откатиться на предыдущую:
  apt install package=version
  yum downgrade package

#### Принцип работы:
1. Обновление:
   - Система проверяет доступные версии пакетов в репозиториях.
   - Загружает и устанавливает новые версии.
2. Откат:
   - Система сохраняет старые версии пакетов в кэше.
   - При необходимости восстанавливает предыдущую версию.

#### Пример:
Откатите версию пакета `nginx` до версии `1.18.0`:
apt install nginx=1.18.0

#### Особенности:
- В DEB-based системах старые версии хранятся в кэше `/var/cache/apt/archives/`.
- В RPM-based системах старые версии могут быть восстановлены через `yum history`.

---

### 6. Особенности ALT Linux

#### Менеджер пакетов:
ALT Linux использует систему управления пакетами на базе RPM. Основной инструмент — `apt-get`.

#### Примеры команд:
apt-get update # Обновление списка пакетов
apt-get install package # Установка пакета
apt-get remove package # Удаление пакета

#### Настройка репозиториев:
Репозитории хранятся в файле /etc/apt/sources.list. Пример содержимого:
rpm [altlinux] http://ftp.altlinux.org/pub/distributions/ALTLinux/p9/branch/x86_64 classic

#### Особенности ALT Linux:
1. Интеграция с отечественным ПО:
   - Поддержка 1С, КриптоПро и других российских программ.
2. Стабильность:
   - Пакеты тщательно тестируются перед выпуском.
3. Поддержка PXE:
   - ALT Linux предоставляет готовые скрипты для сетевой установки.

#### Пример:
Добавьте новый репозиторий для ALT Linux:
echo "rpm [altlinux] http://ftp.altlinux.org/pub/distributions/ALTLinux/p9/branch/x86_64 classic" >> /etc/apt/sources.list
apt-get update

---

### 7. Установка программ из исходных кодов

#### Когда это нужно?
Иногда программы недоступны в репозиториях. В таких случаях их можно собрать из исходных кодов:
- Для использования последних версий программ.
- Для настройки параметров сборки под свои нужды.

#### Инструменты:
1. wget/curl:
   - Используются для скачивания исходных кодов.
2. tar:
   - Используется для распаковки архивов.
3. make:
   - Используется для компиляции программы.
4. gcc/g++:
   - Компиляторы для создания исполняемых файлов.

#### Принцип работы:
1. Скачивание исходного кода:
   - Исходный код обычно распространяется в виде `.tar.gz` или `.zip` архива.
2. Распаковка:
   - Архив распаковывается с помощью `tar` или `unzip`.
3. Настройка:
   - Скрипт `configure` проверяет наличие зависимостей и создает файлы для компиляции.
4. Компиляция:
   - Команда `make` компилирует программу.
5. Установка:
   - Команда `make install` устанавливает программу в систему.

#### Шаги:
1. Скачайте исходный код:
   wget http://example.com/software.tar.gz
   tar -xvzf software.tar.gz
   cd software

2. Скомпилируйте программу:
   ./configure
   make
   sudo make install

#### Преимущества:
- Возможность настроить сборку под свои нужды.
- Доступ к последним версиям программ.

#### Недостатки:
- Сложность установки.
- Проблемы с зависимостями.
- Отсутствие автоматического обновления.

#### Пример:
Соберите программу `htop` из исходных кодов:
wget https://github.com/htop-dev/htop/archive/refs/tags/3.2.2.tar.gz
tar -xvzf 3.2.2.tar.gz
cd htop-3.2.2
./configure
make
sudo make install

---

## Домашнее задание
1. Установите новую программу с помощью менеджера пакетов.
2. Добавьте новый репозиторий и установите программу из него.
3. Обновите все пакеты в системе.
4. Соберите программу из исходных кодов.

---

## Вопросы для самопроверки
1. Какие типы систем управления пакетами существуют?
2. Как установить пакет в DEB-based системах?
3. Как удалить пакет в RPM-based системах?
4. Что такое зависимости и как они разрешаются?
5. Как откатить версию пакета?
6. Как собрать программу из исходных кодов?
