# Лекция 13: Контейнеры Docker

## Цели и задачи
- Изучить основные принципы контейнеризации.
- Разобраться с ролью Docker в разработке и развертывании приложений.
- Научиться устанавливать и настраивать Docker в Linux.
- Понять процесс создания и управления контейнерами.
- Изучить диагностику и устранение неисправностей в работе Docker.

---

## Основной материал

### 1. Введение в контейнеризацию

#### Что такое контейнеризация?
Контейнеризация — это технология, позволяющая запускать приложения в изолированных средах (контейнерах), которые содержат все необходимые зависимости: библиотеки, конфигурации и исполняемые файлы.

#### Зачем нужна контейнеризация?
- Упрощение развертывания приложений.
- Изоляция приложений друг от друга.
- Переносимость между различными системами.
- Эффективное использование ресурсов сервера.

#### Преимущества Docker:
- Легкость использования.
- Поддержка множества языков программирования и фреймворков.
- Интеграция с CI/CD-системами.

---

### 2. Установка Docker

#### Установка через пакетный менеджер
Для установки Docker в Linux используется пакетный менеджер. Например, в Ubuntu:

1. Обновите список пакетов:
   apt update
2. Установите необходимые пакеты:
   apt install apt-transport-https ca-certificates curl software-properties-common
3. Добавьте репозиторий Docker:
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
   echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
4. Установите Docker:
   apt install docker-ce

#### Проверка установки
Проверьте статус службы:
systemctl status docker

Проверьте версию Docker:
docker --version

---

### 3. Основные команды Docker

#### Запуск контейнера
Запустите тестовый контейнер:
docker run hello-world

#### Просмотр запущенных контейнеров
Просмотрите список запущенных контейнеров:
docker ps

#### Просмотр всех контейнеров
Просмотрите все контейнеры (включая остановленные):
docker ps -a

#### Остановка контейнера
Остановите контейнер по ID или имени:
docker stop container_id

#### Удаление контейнера
Удалите контейнер по ID или имени:
docker rm container_id

#### Удаление образа
Удалите образ по ID или имени:
docker rmi image_id

---

### 4. Создание и управление образами

#### Dockerfile
Dockerfile — это текстовый файл, содержащий инструкции для создания образа.

##### Пример Dockerfile:
FROM ubuntu:20.04
RUN apt update && apt install -y nginx
CMD ["nginx", "-g", "daemon off;"]

- FROM: Базовый образ.
- RUN: Выполнение команд в образе.
- CMD: Команда, которая выполняется при запуске контейнера.

#### Сборка образа
Соберите образ из Dockerfile:
docker build -t my-nginx .

#### Запуск контейнера из образа
Запустите контейнер из созданного образа:
docker run -d -p 8080:80 my-nginx

---

### 5. Работа с реестром Docker Hub

#### Авторизация в Docker Hub
Авторизуйтесь в Docker Hub:
docker login

#### Загрузка образа
Загрузите образ в Docker Hub:
docker push username/image_name

#### Скачивание образа
Скачайте образ из Docker Hub:
docker pull username/image_name

---

### 6. Диагностика и устранение неисправностей

#### Просмотр логов контейнера
Просмотрите логи контейнера:
docker logs container_id

#### Проверка использования ресурсов
Проверьте использование ресурсов контейнерами:
docker stats

#### Распространенные проблемы:
- Недостаточно ресурсов на хосте.
- Ошибки в Dockerfile.
- Проблемы с сетевым подключением.

---

### 7. Безопасность Docker

#### Защита контейнеров
1. Используйте официальные образы из Docker Hub.
2. Ограничьте права контейнеров:
   docker run --cap-drop ALL --cap-add NET_BIND_SERVICE ...
3. Регулярно обновляйте образы:
   docker pull image_name

#### Мониторинг контейнеров
Используйте инструменты мониторинга для отслеживания работы контейнеров:
docker events

---

## Домашнее задание
1. Установите и настройте Docker на виртуальной машине.
2. Создайте Dockerfile для простого веб-сервера (например, Nginx).
3. Соберите образ и запустите контейнер.
4. Загрузите образ в Docker Hub и скачайте его на другой машине.
5. Изучите логи контейнера и найдите записи о запросах.

---

## Вопросы для самопроверки
1. Что такое контейнеризация и для чего она используется?
2. Как установить и настроить Docker в Linux?
3. Как создать и запустить контейнер?
4. Как работать с Dockerfile и образами?
5. Какие меры безопасности можно применить для защиты контейнеров?
